@page "/"
@using SkiaSharp
@using System.IO
@using Microsoft.AspNetCore.Components.Forms
@using System.Linq
@using SharpCompress.Archives
@using SharpCompress.Archives.Zip
@using SharpCompress.Common
@using SharpCompress.Writers
@using Microsoft.AspNetCore.Components.Web
@using BlazorInputFile;
@inject IJSRuntime JSRuntime

<style>
    .image-preview {
        display: inline-block;
        margin: 10px;
        text-align: center;
    }

        .image-preview img {
            max-width: 200px;
            max-height: 200px;
        }

    .dropzone {
        border: 2px dashed #cccccc;
        padding: 20px;
        text-align: center;
        cursor: pointer;
    }

    .dropzone-drag {
        border-color: #007bff;
    }
</style>

<h3>Image to WebP Converter</h3>
<DragDrop FilesSelected="HandleFilesSelected" />

<div class="mb-3">
    <label for="qualityInput" class="form-label">Quality:</label>
    <input type="number" class="form-control" id="qualityInput" @bind="webpQuality" min="1" max="100" />
</div>

<div class="image-container">
    @foreach (var image in webpImages)
    {
        <div class="image-preview">
            <a href="@image.ImageData" download="@image.FileName">
                <img src="@image.ImageData" alt="Converted WebP Image" />
                <p>Format: @image.Format</p>
                <p>Original Size: @image.OriginalSize</p>
                <p>Compressed Size: @image.CompressedSize</p>
                <p>Compression Ratio: @image.CompressionRatio</p>
            </a>
        </div>
    }
</div>
<button @onclick="DownloadAllImages">Download All</button>

@code {
    private List<WebpImageInfo> webpImages = new List<WebpImageInfo>();
    private int webpQuality = 85;

    private async Task HandleFilesSelected(List<IFileListEntry> files)
    {
        foreach (var file in files)
        {            
            await ConvertImages(file);
        }
    }

    private async Task ConvertImages(IFileListEntry file)
    {
        using var stream = new MemoryStream();
        await file.Data.CopyToAsync(stream);

        using var originalImage = SKBitmap.Decode(stream.ToArray());
        using var outputStream = new MemoryStream();
        originalImage.Encode(outputStream, SKEncodedImageFormat.Webp, webpQuality);

        var webpImage = new WebpImageInfo
            {
                ImageData = $"data:image/webp;base64,{Convert.ToBase64String(outputStream.ToArray())}",
                Format = "webp",
                OriginalSize = FormatSize(stream.Length),
                CompressedSize = FormatSize(outputStream.Length),
                CompressionRatio = ((double)outputStream.Length / stream.Length * 100).ToString("0.00") + "%",
                FileName = Path.ChangeExtension(file.Name, "webp")
            };

        webpImages.Add(webpImage);

    }

    private async Task DownloadAllImages()
    {
        var archivePath = Path.Combine(Path.GetTempPath(), "converted_images.zip");

        using (var archiveStream = new MemoryStream())
        {
            using (var archive = ZipArchive.Create())
            {
                foreach (var image in webpImages)
                {
                    var entryStream = new MemoryStream(Convert.FromBase64String(image.ImageData.Split(',')[1]));
                    archive.AddEntry(image.FileName, entryStream);
                }
                archive.SaveTo(archiveStream, new WriterOptions(CompressionType.Deflate));
            }

            File.WriteAllBytes(archivePath, archiveStream.ToArray());
        }

        await JSRuntime.InvokeVoidAsync("saveAsFile", "converted_images.zip", Convert.ToBase64String(File.ReadAllBytes(archivePath)));
    }

    private string FormatSize(long size)
    {
        if (size > 1024 * 1024)
        {
            return (size / (1024 * 1024)).ToString("0.00") + " MB";
        }
        else
        {
            return (size / 1024).ToString("0.00") + " KB";
        }
    }
    public class WebpImageInfo
    {
        public string ImageData { get; set; }
        public string Format { get; set; }
        public string OriginalSize { get; set; }
        public string CompressedSize { get; set; }
        public string CompressionRatio { get; set; }
        public string FileName { get; set; }
    }
}
